# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import routetable_pb2 as routetable__pb2


class RouterStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.GetRoute = channel.unary_unary(
        '/routetable.Router/GetRoute',
        request_serializer=routetable__pb2.Destination.SerializeToString,
        response_deserializer=routetable__pb2.Route.FromString,
        )
    self.AddRoutes = channel.stream_unary(
        '/routetable.Router/AddRoutes',
        request_serializer=routetable__pb2.Route.SerializeToString,
        response_deserializer=routetable__pb2.Result.FromString,
        )


class RouterServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def GetRoute(self, request, context):
    """GetNextHop(Subnet) is a simple RPC that will return the route to a given destination 
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def AddRoutes(self, request_iterator, context):
    """AddRoutes() is a request-streaming RPC to add new routes to the routing table
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_RouterServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'GetRoute': grpc.unary_unary_rpc_method_handler(
          servicer.GetRoute,
          request_deserializer=routetable__pb2.Destination.FromString,
          response_serializer=routetable__pb2.Route.SerializeToString,
      ),
      'AddRoutes': grpc.stream_unary_rpc_method_handler(
          servicer.AddRoutes,
          request_deserializer=routetable__pb2.Route.FromString,
          response_serializer=routetable__pb2.Result.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'routetable.Router', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
